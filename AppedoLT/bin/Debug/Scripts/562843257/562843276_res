//var winName = window.name;
//if(winName=='') {
//    var top = window.open("", "_top");
//    top.close();
//}
//ps_window

var isDebugging=false;
//window.history.forward(1);
//Folllowing function added by Stephen on 28-March-2009 to handle all the javascript errors
function ErrorSetting(msg, file_loc, line_no) {
    var e_msg=msg;
    var e_file=file_loc;
    var e_line=line_no;
    var error_d = "Error in file: " + file_loc +"\nline number:" + line_no +"\nMessage:" + msg;
    if(isDebugging)
        alert("Error Found !!!\n--------------\n"+error_d);
     return true;
}
window.onerror = ErrorSetting;

var message="Sorry, right-click has been disabled"; 
/////////////////////////////////// Functions
function clickIE() {
  if (document.all) {
    alert(message);
    return false;
  }
} 

function clickNS(e) {
  if (document.layers||(document.getElementById&&!document.all)) { 
    if (e.which==2||e.which==3) {
      alert(message);
      return false;
    }
  }
} 

function DialogYes(evt){
    if(evt != null){
        closeConfirm(evt);
        showProgress(evt);
        var yesbtn = evt.getSource().findComponent('::hiddenBtnYesId');
        if(yesbtn != null){
            var yesbtnId = yesbtn.getValue();
            if(yesbtnId != null){
                document.getElementById(yesbtnId).click();
            }
        }
    }
}

function DialogNo(evt){
    if(evt != null){
        closeConfirm(evt);
        var nobtn = evt.getSource().findComponent('::hiddenBtnNoId');
        if(nobtn != null){
            var nobtnId = nobtn.getValue();
            if(nobtnId != null){
                document.getElementById(nobtnId).click();
            }
        }
    }
}

function DialogOk(evt){
    if(evt != null){
      closeInform(evt);
      var okbtn = evt.getSource().findComponent('::hiddenBtnOkId');
        if(okbtn != null){
            var okbtnId = okbtn.getValue();
            if(okbtnId != null){
                document.getElementById(okbtnId).click();
            }
        }
    }    
}

function confirmBtnClick(evt){
    if(evt != null){
        var buttonId = evt.getSource().getProperty('BUTTONID');
        var confirmPopup = evt.getSource().findComponent('::psPopupDynConfirm');
        var busyPopup = evt.getSource().findComponent('::psPopupProcess');
        if(buttonId != null && confirmPopup != null && busyPopup != null){
            var btn = evt.getSource().findComponent(buttonId);
            if(btn != null){
                if (confirmPopup != null && confirmPopup.isPopupVisible()) {
                    confirmPopup.hide();
                }    
                if (busyPopup != null && !busyPopup.isPopupVisible()) {
                    busyPopup.show();
                }
                var clientId = btn.getClientId();
                document.getElementById(clientId).click();
            }
        } 
    }
}

function closeConfirm(evt){
    if(evt != null){
        var popupIdFld = evt.getSource().findComponent('::confirmDialogId');
        if (popupIdFld != null) {
            var popupId = popupIdFld.getValue();
            var popup = AdfPage.PAGE.findComponent(popupId);
            if (popup != null && popup.isPopupVisible()) {
                popup.hide();
            }
        }
    }
}

function closeInform(evt){
    if(evt != null){
        var popupIdFld = evt.getSource().findComponent('::InformDialogId');
        if (popupIdFld != null) {
            var popupId = popupIdFld.getValue();
            var popup = AdfPage.PAGE.findComponent(popupId);
            if (popup != null && popup.isPopupVisible()) {
                popup.hide();
            }
        }
    }
}

function showProgress(evt) {
    if(evt != null){
        var popupIdFld = evt.getSource().findComponent('::progressDialogId');
        if (popupIdFld != null) {
            var popupId = popupIdFld.getValue();
            var popup = AdfPage.PAGE.findComponent(popupId);
            var busyMsg = evt.getSource().getProperty('ProgressMessage');
            if(busyMsg != undefined){
                var msgComponent = evt.getSource().findComponent('::busyMsg');
                msgComponent.setValue(busyMsg);
            }
            if (popup != null && !popup.isPopupVisible()) {
                popup.show();
            }
        }
    }    
}

function companyChangeEvent(evt){
   if(evt != null){
    showProgress(evt);
    document.forms[0].submit();
   }
}



/*    To trim the values against the components     */
function Trim(evt){
    var inputField = evt.getSource(); 
    var TRIM_VALUE = inputField.getValue();
    if(TRIM_VALUE.length < 1){
        return"";
    }
    TRIM_VALUE = RTrim(TRIM_VALUE);
    TRIM_VALUE = LTrim(TRIM_VALUE);
    if(TRIM_VALUE==""){
        inputField.setValue("");
    }
    else{
        inputField.setValue(TRIM_VALUE);
    }
} //End Function

function RTrim(VALUE){
    var w_space = String.fromCharCode(32);
    var v_length = VALUE.length;
    var strTemp = "";
    if(v_length < 0){
        return"";
    }
    var iTemp = v_length -1;
    
    while(iTemp > -1){
        if(VALUE.charAt(iTemp) == w_space){
        }
        else{
            strTemp = VALUE.substring(0,iTemp +1);
            break;
        }
        iTemp = iTemp-1;
    } //End While
    return strTemp;

} //End Function

function LTrim(VALUE){
    var w_space = String.fromCharCode(32);
    if(v_length < 1){
    return"";
    }
    var v_length = VALUE.length;
    var strTemp = "";
    var iTemp = 0;
    while(iTemp < v_length){
        if(VALUE.charAt(iTemp) == w_space){
        }
        else{
            strTemp = VALUE.substring(iTemp,v_length);
            break;
        }
        iTemp = iTemp + 1;
    } //End While
    return strTemp;
} //End Function


function initFocus(id){
    var fldId =document.getElementById(id);        
    if (fldId != null) {
        fldId.focus();
    }   
}

function showHelpContent(evt){
    var helpUrl = evt.getSource().getProperty('helpUrl');
    var facesContext = evt.getSource().getProperty('helpContext');
    var windowProperties = "height=600,width=800,location=no,menubar=no,resizable=no,status=yes,scrollbars=yes,top=0,left=0";
    var psHelp = null;
    var contextRoot = facesContext + "/WebHelp/";
    var helpLink = contextRoot + helpUrl;
    if(helpUrl != null && helpUrl != "" ){
       psHelp = window.open (helpLink,"HelpWindow",windowProperties); 
       psHelp.location.reload();
       psHelp.focus();//Added by suganth for setting focus for help Link
    }else{
        alert("No Help Available");
    }
    return false;
}

/*   To change Alphabetic CapsWithOutSpace  */
function ToUpperAlphabetic(evt) {
    /*  Initialize local variables  */
    var key;
    var keychar;
    var flag = false;
    var indicator = false;
    var inputField = evt.getSource();
    /* Cross Browser compactability Check */
    if (window.event)
        key = window.event.keyCode;
    else if (evt)
        key = evt.which;
    else 
        flag = true;
    /*  To Change a Lower case to upper case  */
    if ((key >= 97) && (key <= 122))
        key = key - 32;
    /*  Store Input received locally  */
    keychar = String.fromCharCode(key);
    /*  Check whether the key is control keys */
    if ((key == null) || (key == 0) || (key == 8) || (key == 9) || (key == 13) || (key == 27))
        flag = true;
    /* char is available in the list of values */
    else if ((("ABCDEFGHIJKLMNOPQRSTUVWXYZ").indexOf(keychar) >  - 1)) {
        flag = true;
        indicator = true;
    }
    /* To accept numbers */
    else if ((("0123456789").indexOf(keychar) > -1)) 
        flag = true;
        
    /* to check decimal point jump */
    else if (keychar == 46) {
        flag = false;
    }
    /*  No char available in the list to set null and return false  */
    else  {
        evt.returnValue = false;
        window.event.returnValue = false;
        flag = false;
    }
    /* To Set the Cross Browser compactability Check */
    if (window.event)
        window.event.keyCode = key;
    else if (evt)
        inputField.setValue(evt.getNewValue().toUpperCase());
    if (!indicator && !flag)
      //  alert('Invalid Character ! . . . \n Please Enter [A - Z]');
    return flag;
}


function sqlInjectionBlock(evt)     {
    /*  Initialize local variables  */
    var key;
    var keychar;
    var flag=false;
    /* Cross Browser compactability Check */
    if (window.event)  key = window.event.keyCode;
    else if (evt)  key = evt.which;
    else flag = true;
    /*  Store Input received locally  */
    keychar = String.fromCharCode(key);
    /*  Check whether the key is control keys */
    if ((key==null) || (key==0) || (key==8) || (key==9) || (key==13) || (key==27) )
        flag = true;
    /* char is available in the list of values */
    else if((("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 @#$%&*-_=+.?/^").indexOf(keychar)  > -1)) 
        flag = true;
    /* to check decimal point jump */
    else if (keychar == ".")   {
        flag = false;
    }
    /*  No char available in the list to set null and return false  */
    else    {
        evt.returnValue=false;
        window.event.returnValue=false;
        flag = false;
    }
    return flag;
}

function getConfirm(){
    var conMsg=confirm("Are you sure close this Window ?");   
    if(conMsg==true){ 
         var top = window.open("", "_top");
          top.close();
    }   
    else{
          return false;
    }
    
}
function disableFunctionKeys() {
    /* Included the details for locking purpose */
    //        if ( window.event.ctrlKey && window.event.keyCode == 115 ){         
    //            document.getElementById('ps:navId:logoutBtn').click();
    //        }
    //        if ( window.event.altKey && window.event.keyCode == 115 ){
    //            document.getElementById('ps:navId:logoutBtn').click();
    //        }
    if (window.event.keyCode == 8) {
        //Backspace pressed 
        if (event.srcElement.type == "text" || event.srcElement.type == "textarea" || event.srcElement.type == "password" || event.srcElement.type == "file") {
            return true;
        }
        else {
            event.returnValue = false;
            event.keyCode = 0;
            window.status = "We have disabled this key";
            return false;
        }
    }

    if (window.event.ctrlKey) {
        // Enable Copy Paste
        if (window.event.keyCode == 67 || window.event.keyCode == 99 || // Ctrl+C  Enabling Copy 
        window.event.keyCode == 86 || window.event.keyCode == 118 || // Ctrl+V  Enabling Paste             
        window.event.keyCode == 88 || window.event.keyCode == 120) {
            // Ctrl+X  Enabling Cut 
            return true;
        }
        else {
            switch (window.event.keyCode) {
                                        
                case 80:
                //CTRL+P
                    window.event.returnValue = false;
                    window.event.keyCode = 0;
                    window.status = "We have disabled function keys";
                    break;
                default :
                   window.status = "Done";
            }
            window.status = "We have disabled this key";
            return false;
        }
    }
    if (window.event.altKey) {
        //alert("We have disabled ALT Key");
        /*
        -->>Commented By G.Sudarsan On 16-Mar-2010 For Shortcut keys enable<<-- 
        event.returnValue = false; 
        event.keyCode = 0; 
        window.status = "We have disabled this key";
        -->>End OF Comment<<--
        -->>Comment removed by G.Sudarsan On 16-Mar-2010 For Shortcut keys enable<<--*/
        switch (window.event.keyCode) {            
            case AdfKeyStroke.ARROWLEFT_KEY:
                window.event.returnValue = false;
                window.event.keyCode = 0;
                window.status = "We have disabled function keys";
                break;
            //ALT+LEFTARROW        
            case AdfKeyStroke.ARROWRIGHT_KEY:
            //ALT+RIGHTARROW             
                window.event.returnValue = false;
                window.event.keyCode = 0;
                window.status = "We have disabled function keys";
                break;
            default :
               window.status = "Done";
        }
        window.status = "We have disabled this key";
        return false;
        /*-->>End of comment removed*/
    }
    switch (window.event.keyCode) {
        case 113:
        //F2
        case 114:
        //F3
        case 115:
        //F4
        case 116:
        //F5
        case 117:
        //F6
        case 118:
        //F7
        case 119:
        //F8
        case 120:
        //F9
        case 121:
        //F10
        case 122:
        //F11
        case 123:
        //F12
        case 27:
        //ESCAPE
          // Patch Work Done by B.Ramprasad For Launching LOV on pressing F9 key
           if (window.event.keyCode == AdfKeyStroke.F9_KEY && AdfPage.PAGE.getActiveComponent() != null
           && AdfPage.PAGE.getActiveComponent().getTypeName() == "AdfRichInputListOfValues" ) {
              AdfLaunchPopupEvent.queue(AdfPage.PAGE.getActiveComponent(),true);
           }else {
            window.event.returnValue = false;
            window.event.keyCode = 0;
            window.status = "We have disabled function keys";
           }
            break;
        default :
            window.status = "Done";
    }
}
/*Following function to Hide the contextMenu  Added By Stephen on 19-June-2008  */
    function hideContextMenu() {
        window.status = "We have disabled this key";
        return false;
    }

/*Followig line to avoid the F1-Help Added By Stephen on 19-June-2008 */
document.onhelp = function() {
    window.status = "We have disabled this key";return(false);
}  
    
/* Follwing function added for disable drag and drop for readonly fileds Added By Stephen on 28-June-2008 */
document.ondragstart=function() { 
    return false; 
}

/* Follwing function added for disable drag and drop for All fileds and Enable the selection Added By Perumal on 30-July-2008  */
function psDragEventHandler() {
    //window.status = "We have disabled Drag [Run Time]"
    return false;
}
document.ondrag = psDragEventHandler();     
/* Follwing function added for disable drag and drop Added By Stephen on 26-June-2008 */
function myblockscript (event){
 
    document.oncontextmenu=function() {
        window.status = "We have disabled this key";return(false);
    }  
    
    document.attachEvent("onkeydown", disableFunctionKeys);
    document.captureEvents(Event.KEYDOWN); 
    callInit();
}


function moreGenericResetFields() { 

   for ( i=0; i < document.forms[0].elements.length ; i++) { 
  if ( ! ( document.forms[0].elements[i].readOnly  || document.forms[0].elements[i].disabled) ) { 

         if (( document.forms[0].elements[i].type == 'text' ) || ( document.forms[0].elements[i].type == 'textarea' ) || ( document.forms[0].elements[i].type == 'password' )) { 
            document.forms[0].elements[i].value = ''; 
         } 

         if ( document.forms[0].elements[i].type == 'checkbox' ) { 
            document.forms[0].elements[i].checked = false; 
         } 

         if ( document.forms[0].elements[i].type == 'select-one' && ( document.forms[0].elements[i].length != 0 )) { 
             document.forms[0].elements[i].options[0].selected = true; 
         } 

      } 
   }  
   if(document.form!=null)document.form.submit();
}

  /* Follwing function added for making user & usergrp lov readonly By Bhavani on 09-Feb-2009  */
function IsReadOnly(evt)       {
 if (evt.ctrlKey) {   
    if (evt.keyCode == 86 || evt.keyCode == 118  ) {
        evt.returnValue = false; 
        evt.keyCode = 0; 
        return false;
    }
 }
    window.event.returnValue = false; 
    window.event.keyCode = 0; 
    return false;
}

function IsReadOnlyFilter(evt)       {
 if (evt.ctrlKey) {   
    if (evt.keyCode == 86 || evt.keyCode == 118  ) {
        evt.returnValue = false; 
        evt.keyCode = 0; 
        return false;
    }
 }
    if(window.event.keyCode != 13){
        window.event.returnValue = false; 
        window.event.keyCode = 0; 
    }
    return false;
}

function unmappedClickMthd(evt){
                evt.getSource().findComponent('ps:hiddenField').setValue('UnmappedClicked');
            }

function saveClickMthd(evt){
                evt.getSource().findComponent('ps:saveHidden').setValue('saveclicked');
            }
            
            
function entitySelect(evt) {
    var field = evt.getSource().findComponent('ps:hiddenField');
    if (field != null) {
        field.setValue('EType');
    }
}



/* blocks typing in the LOV text and fires the LOV on enter key */
function nonEditableLOV(evt) {
    //alert("entered");
    /*  Initialize local variables  */
    var key;
    var keychar;
    var flag = false;
    /* Cross Browser compactability Check */
    if (window.event)
        key = window.event.keyCode;
    else if (evt)
        key = evt.which;
    else 
        flag = true;
    /*  Store Input received locally  */
    keychar = String.fromCharCode(key);
    /*  Check whether the key is control keys */

    if ((!window.event.ctrlKey) && ((key == null) || (key == 0) || (key == 9) || (key == 13) || (key == 27))) {
        flag = true;
    }
    else  {
        window.event.returnValue = false;
        window.event.keyCode = 0;
    }
    return flag;
}

function clearFilterFields(evt) {
    try  {
        var tableIds = evt.getSource().getProperty("tableIds");
        var cols = evt.getSource().getProperty("noCols");
        var noFilterFacts = evt.getSource().getProperty("noCustFilter");
        var tableArr = tableIds.split(",");
        var colsArr = cols.split(",");
        var noFilterFactsArr = null;
        if (noFilterFacts != null) {
            noFilterFactsArr = noFilterFacts.split(",");
        }
        for (i = 0;i < tableArr.length;i++) {
            for (j = 1;j <= colsArr[i];j++) {
                clearField(evt, "_afrFilterps_afr_" + tableArr[i] + "_afr_" + tableArr[i] + "column" + j);
            }
        }
        if (noFilterFactsArr != null) {
            for (i = 0;i < tableArr.length;i++) {
                for (j = 1;j <= noFilterFactsArr[i];j++) {
                    clearField(evt, tableArr[i] + ":" + tableArr[i] + "filterFace" + j);
                }
            }
        }
    }
    catch (e) {
      //alert(e);
    }

}
function clickLogout(evt){
     if(location.href.indexOf("logout=Y")!=-1){        
        document.getElementById('ps:logoutButtonClose').click();
     }
}

var ie4   = (document.all)? true: false;
var isNS4 = (document.layers) ? true : false;
var isIE5 = (document.all && document.getElementById) ? true : false;
var isNS6 = (!document.all && document.getElementById) ? true : false;

function disablemousewheel(e){
    var shift_press        =false;
     if(window.event.shiftKey){
            shift_press=true;
    }else{
            shift_press=false;
    }
    e.keyCode = 0;
    //alert('This operation is not allowed');
    e.preventDefault();
    e.stopPropagation();
    return false;
}

function callInit(){
    try {
            if(isIE5){
                document.attachEvent("onmousedown", disablerightclick);
                document.onmousewheel = disablemousewheel;
            } else {
             document.attachEvent("onclick", disablerightclick);
                 }
            if (document.layers || (!document.all && document.getElementById)) {
                window.captureEvents(Event.MOUSEDOWN);
            }
    } catch (e0) {
            //alert('RS_01_eng[callInit] error occurred => '+e0.message);
    }
}

function disablerightclick(e){
    var mouse_click            = "";
    var shift_press        =false;
    var alt_press          =false;
    var ctrl_press         =false;
    
    try {
            if(window.event) {
            if(window.event.ctrlKey){
                ctrl_press=true;
            }else{
                ctrl_press=false;
            }
            if ( window.event.altKey){
                alt_press=true;
            }else{
                altpress=false;
            }
            if(window.event.shiftKey){
                shift_press=true;
            }else{
                shift_press=false;
            }
                mouse_click= event.button;                       //IE
            } else {
                mouse_click= e.which;                                  //firefox
            }       
            //alert('navigator---'+navigator.appName+', mouse_click--'+mouse_click+', isIE5-'+isIE5);
            if (mouse_click == 2 || mouse_click == 3 || mouse_click == 4){
                if (isIE5 && mouse_click == 2 && (event.srcElement.tagName != "U")){
                    alert("Mouse Right Click Disabled");
                    return false;
                } else if(!isIE5 && mouse_click == 3 && (e.target.tagName != 'U')){
                    alert("Mouse Right Click Disabled");
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                } else if ( mouse_click ==4 ){
                    alert("Mouse Middle Click Disabled");
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }else if(ctrl_press || alt_press || shift_press){
                    alert("This operation is not allowed");
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
            }           
    } catch (e1) {
        //alert('RS_01_eng[disablerightclick] error occurred => '+e.message);
        mouse_click = "";
    }          
    return true;
}


function themeChangeEvent(evt){
   if(evt != null){
    showProgress(evt);
    document.forms[0].submit();
   }
}
function customConvertEnterToTab(event) {
  // Commented by Suganth.G on 17-Jan-2011 for CL192 Beta Receipt Testing feedback from 5 branches
  // Uncommented by Suganth.G on 22-Jan-2011 as per the instructions given by Mr.Ramprasad as he had the discussion with
  // Mr.Krishnamurthy, Mr.J.Sivakumar and Vice President.
  // Removed Enter Key Functionality  
  var key=window.event.keyCode; 
  var compprev = AdfPage.PAGE.getActiveComponent();
  AdfPage.PAGE.clearAllMessages();
  if (key == 13)  {  
    var nextfieldid = event.getSource().getProperty("NEXTNAV");    
    if (nextfieldid != null && nextfieldid.indexOf("/") != -1){
      var fieldArray = nextfieldid.split("/");
      for(i = 0; i<fieldArray.length; i++){
        var comp = event.getSource().findComponent(fieldArray[i]);
        if(comp != null){
          if (comp != null && (!comp.getProperty('disabled')) && (comp.isShowing())) {
              if (compprev != null && compprev.getTypeName() != "AdfRichCommandButton"){
                window.event.returnValue = false;
                window.event.keyCode = 0;
              }
              comp.focus();
              if (AdfPage.PAGE.getMessages(compprev.getClientId()) != null ) {
                  window.event.returnValue = false;
                  window.event.keyCode = 0; 
                  compprev.focus();
              }
              break;
          }
        }
      }
    }else{    
      var comp1 = event.getSource().findComponent(nextfieldid);
        if (comp1 != null) {
            if (compprev != null && compprev.getTypeName() != "AdfRichCommandButton"){
              window.event.returnValue = false;
              window.event.keyCode = 0;
            }
            comp1.focus();
            if (AdfPage.PAGE.getMessages(compprev.getClientId()) != null ) {
                window.event.returnValue = false;
                window.event.keyCode = 0;
                compprev.focus();
            }          
        }
    }    
  }
}
function pressEnter(event) {
   getId = AdfAgent.AGENT.getElementById(event.getSource().getClientId());
    if (document.createEvent) {
      var evt = document.createEvent("KeyboardEvent");
      evt.initKeyEvent("keydown",true,true,null,false,false,false,false,13,0);
      getId.dispatchEvent(evt);
    }else {
      evt = document.createEventObject();
      evt.keyCode = 13;
      getId.fireEvent("onkeydown",evt);
    }
}

function convertEnterToTab(event) {
  var key=window.event.keyCode;
  var compprev = AdfPage.PAGE.getActiveComponent();
  if (key == 13) 
  {
    var nextfieldid = event.getSource().getProperty("NEXTNAV");
    var comp = event.getSource().findComponent(nextfieldid);
    if (comp != null) {
        comp.focus();
        if (AdfPage.PAGE.getMessages(compprev.getClientId()) != null ) {
            compprev.focus();
        }
    }    
  }
  
  
}

/* To detect Browser version*/
function getBrowserVersion() {

    var version;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("MSIE") !=  - 1) {   // IE
        var msie = userAgent.indexOf("MSIE ");
        version = 'IE-' + userAgent.substring(msie + 5, msie + 8);
       
    }
    else if (userAgent.indexOf("Firefox") !=  - 1) {   //Firefox
        var firefox = userAgent.indexOf("Firefox");
        version = 'FF-' + userAgent.substring(firefox + 8, firefox + 14);
    }
    else if (userAgent.indexOf("Chrome") !=  - 1) { //Google Chrome
        var chrome = userAgent.indexOf("Chrome");
        version = 'GC-' + userAgent.substring(chrome + 7, chrome + 20);
    }
    else if (userAgent.indexOf("Opera") !=  - 1) {      //Opera
        if (opera) {
            version = 'O-' + opera.version();
        }
    }
    var browserVer = AdfPage.PAGE.findComponentByAbsoluteId("ps:browserVer");
    if (browserVer != null) {
        browserVer.setValue(version);
    }
}

